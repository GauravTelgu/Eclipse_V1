package com.maveric.project.test;

import static org.hamcrest.CoreMatchers.equalToObject;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import org.apache.http.HttpStatus;
import org.hamcrest.CoreMatchers;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.maveric.project.pojos.EmployeePojo;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import junit.framework.Assert;

public class RestApiTest {

	@BeforeClass
	public static void SetupEnv() {
		RestAssured.baseURI = "https://dummy.restapiexample.com/api/v1";
	}

	@Ignore
	@Test(testName = "Get All Employee details")
	public void test1() {
		// Normal response required Assertion to test
		Response response = RestAssured.get("/employees");
		Assert.assertEquals(response.getStatusCode(), 200);
		System.out.println(response);

		// Validatable response**
		String responsebody = RestAssured.get("/employees").then().assertThat().statusCode(200).and().extract()
				.asString();
		System.out.println(responsebody);
	}

	@Ignore
	@Test(testName = "Get Specific Employee details")

	public void test2() {
		RestAssured.get("/employee/1").then().assertThat().statusCode(200).and().body("employee_name",
				equalToObject("Tiger Nixon"));
	}

	/*
	 * @Test(testName = "Get Specific Employee details(Using Query Parameter)")
	 * 
	 * public void test3() { RestAssured.get("/employee/1") .then() .assertThat()
	 * .statusCode(200) .and() .body("employee_name",equalToObject("Tiger Nixon"));
	 * }
	 */

	@Ignore
	@Test(testName = "Add new Employee details")
	public void test5() {

		String payload = "{name: test, salary:1000, age:25}";
		RestAssured.given().contentType(ContentType.JSON).body(payload).post("/create").then().assertThat()
				.statusCode(HttpStatus.SC_CREATED).and()
				.body("message", equalToObject("Successfully! Record has been added"));
	}

	@Ignore
	@Test(testName = "Add new Employee details")
	public void test6() {

		// String payload = "{name: test; salary:1000; age:25}";

		HashMap<String, String> payload = new HashMap<>();
		payload.put("name", "Gaurav");
		payload.put("salary", "10000");
		payload.put("age", "25");

		RestAssured.given().contentType(ContentType.JSON).body(payload).post("/create").then().assertThat()
				.statusCode(HttpStatus.SC_CREATED).and().body(CoreMatchers.containsString("Successfully"));
	}

	@Ignore
	@Test(testName = "Add new Employee details using employee.json file")
	public void test7() throws DatabindException, IOException {

		ObjectMapper mapper = new ObjectMapper();
		FileInputStream stream = new FileInputStream(new File("./TestData/EmployeeData.json"));

		EmployeePojo payload = mapper.readValue(stream, EmployeePojo.class);
		RestAssured.given().contentType(ContentType.JSON).body(payload).post("/create").then().assertThat()
				.body("message", equalToObject("Successfully! Record has been added"));
	}

	@Test(testName = "Json to pojo")
	public void test8() throws JsonMappingException, JsonProcessingException {

		String responsebody = RestAssured.get("/employees").then().assertThat().statusCode(200).and().log().body()
		.toString();

		ObjectMapper objectMapper = new ObjectMapper();
		EmployeePojo employee = objectMapper.readValue(responsebody, EmployeePojo.class);
		
		System.out.println("Name: " + employee.getName());
		System.out.println("Salary: " + employee.getSalary());
		System.out.println("Age: " + employee.getAge());
	}

	@AfterClass
	public static void tearDownEnv() {
		RestAssured.reset();
	}
}
